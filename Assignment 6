//question 1a
#include <iostream>
using namespace std;

class Node {
public:
    int data;
    Node* prev;
    Node* next;
    Node(int val) {
        data = val;
        prev = nullptr;
        next = nullptr;
    }
};

class DoublyLinkedList {
public:
    Node* head;
    DoublyLinkedList() {
        head = nullptr;
    }

    void insertAtBeginning(int val) {
        Node* newNode = new Node(val);
        newNode->next = head;
        if (head != nullptr) head->prev = newNode;
        head = newNode;
    }

    void insertAtEnd(int val) {
        Node* newNode = new Node(val);
        if (head == nullptr) {
            head = newNode;
            return;
        }
        Node* temp = head;
        while (temp->next != nullptr)
            temp = temp->next;
        temp->next = newNode;
        newNode->prev = temp;
    }

    void insertAfterNode(int target, int val) {
        Node* temp = head;
        while (temp != nullptr) {
            if (temp->data == target) {
                Node* newNode = new Node(val);
                newNode->next = temp->next;
                newNode->prev = temp;
                if (temp->next != nullptr)
                    temp->next->prev = newNode;
                temp->next = newNode;
                return;
            }
            temp = temp->next;
        }
        cout << "Node " << target << " not found!" << endl;
    }

    void deleteNode(int key) {
        Node* temp = head;
        while (temp != nullptr) {
            if (temp->data == key) {
                if (temp->prev != nullptr)
                    temp->prev->next = temp->next;
                else
                    head = temp->next;
                if (temp->next != nullptr)
                    temp->next->prev = temp->prev;
                delete temp;
                return;
            }
            temp = temp->next;
        }
        cout << "Node " << key << " not found!" << endl;
    }

    void searchNode(int key) {
        Node* temp = head;
        while (temp != nullptr) {
            if (temp->data == key) {
                cout << "Node " << key << " found!" << endl;
                return;
            }
            temp = temp->next;
        }
        cout << "Node " << key << " not found!" << endl;
    }

    void display() {
        Node* temp = head;
        while (temp != nullptr) {
            cout << temp->data;
            if (temp->next != nullptr) cout << " <-> ";
            temp = temp->next;
        }
        cout << endl;
    }
};

int main() {
    DoublyLinkedList dll;
    int choice, data, target;

    while (true) {
        cout << "\nDoubly Linked List Operations\n";
        cout << "1. Insert at beginning\n2. Insert at end\n3. Insert after node\n";
        cout << "4. Delete node\n5. Search node\n6. Display\n7. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
        case 1:
            cout << "Enter data: ";
            cin >> data;
            dll.insertAtBeginning(data);
            break;
        case 2:
            cout << "Enter data: ";
            cin >> data;
            dll.insertAtEnd(data);
            break;
        case 3:
            cout << "Enter target node: ";
            cin >> target;
            cout << "Enter data: ";
            cin >> data;
            dll.insertAfterNode(target, data);
            break;
        case 4:
            cout << "Enter node to delete: ";
            cin >> data;
            dll.deleteNode(data);
            break;
        case 5:
            cout << "Enter node to search: ";
            cin >> data;
            dll.searchNode(data);
            break;
        case 6:
            dll.display();
            break;
        case 7:
            exit(0);
        default:
            cout << "Invalid choice!" << endl;
        }
    }
    return 0;
}
//b
#include <iostream>
using namespace std;

class CNode {
public:
    int data;
    CNode* next;
    CNode(int val) {
        data = val;
        next = nullptr;
    }
};

class CircularLinkedList {
public:
    CNode* head;
    CircularLinkedList() {
        head = nullptr;
    }

    void insertEnd(int val) {
        CNode* newNode = new CNode(val);
        if (head == nullptr) {
            head = newNode;
            newNode->next = head;
            return;
        }
        CNode* temp = head;
        while (temp->next != head)
            temp = temp->next;
        temp->next = newNode;
        newNode->next = head;
    }

    void insertBeginning(int val) {
        CNode* newNode = new CNode(val);
        if (head == nullptr) {
            head = newNode;
            newNode->next = head;
            return;
        }
        CNode* temp = head;
        while (temp->next != head)
            temp = temp->next;
        newNode->next = head;
        temp->next = newNode;
        head = newNode;
    }

    void insertAfterNode(int target, int val) {
        if (!head) return;
        CNode* temp = head;
        do {
            if (temp->data == target) {
                CNode* newNode = new CNode(val);
                newNode->next = temp->next;
                temp->next = newNode;
                return;
            }
            temp = temp->next;
        } while (temp != head);
        cout << "Node " << target << " not found!" << endl;
    }

    void deleteNode(int key) {
        if (!head) return;
        CNode* curr = head;
        CNode* prev = nullptr;
        do {
            if (curr->data == key) {
                if (prev) {
                    prev->next = curr->next;
                    if (curr == head) head = curr->next;
                } else { // deleting head
                    CNode* last = head;
                    while (last->next != head) last = last->next;
                    if (last == head) head = nullptr;
                    else {
                        last->next = head->next;
                        head = head->next;
                    }
                }
                delete curr;
                return;
            }
            prev = curr;
            curr = curr->next;
        } while (curr != head);
        cout << "Node " << key << " not found!" << endl;
    }

    void searchNode(int key) {
        if (!head) {
            cout << "List is empty!" << endl;
            return;
        }
        CNode* temp = head;
        do {
            if (temp->data == key) {
                cout << "Node " << key << " found!" << endl;
                return;
            }
            temp = temp->next;
        } while (temp != head);
        cout << "Node " << key << " not found!" << endl;
    }

    void display() {
        if (!head) {
            cout << "List is empty!" << endl;
            return;
        }
        CNode* temp = head;
        do {
            cout << temp->data << " -> ";
            temp = temp->next;
        } while (temp != head);
        cout << head->data << endl; // repeat head at end
    }
};

int main() {
    CircularLinkedList cll;
    int choice, data, target;

    while (true) {
        cout << "\nCircular Linked List Operations\n";
        cout << "1. Insert at beginning\n2. Insert at end\n3. Insert after node\n";
        cout << "4. Delete node\n5. Search node\n6. Display\n7. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
        case 1:
            cout << "Enter data: ";
            cin >> data;
            cll.insertBeginning(data);
            break;
        case 2:
            cout << "Enter data: ";
            cin >> data;
            cll.insertEnd(data);
            break;
        case 3:
            cout << "Enter target node: ";
            cin >> target;
            cout << "Enter data: ";
            cin >> data;
            cll.insertAfterNode(target, data);
            break;
        case 4:
            cout << "Enter node to delete: ";
            cin >> data;
            cll.deleteNode(data);
            break;
        case 5:
            cout << "Enter node to search: ";
            cin >> data;
            cll.searchNode(data);
            break;
        case 6:
            cll.display();
            break;
        case 7:
            exit(0);
        default:
            cout << "Invalid choice!" << endl;
        }
    }
    return 0;
}


//question 2
#include <iostream>
using namespace std;

class CNode {
public:
    int data;
    CNode* next;
    CNode(int val) {
        data = val;
        next = nullptr;
    }
};

class CircularLinkedList {
public:
    CNode* head;
    CircularLinkedList() { head = nullptr; }

    void insertEnd(int val) {
        CNode* newNode = new CNode(val);
        if (!head) {
            head = newNode;
            newNode->next = head;
            return;
        }
        CNode* temp = head;
        while (temp->next != head)
            temp = temp->next;
        temp->next = newNode;
        newNode->next = head;
    }

    void displayWithHeadRepeat() {
        if (!head) {
            cout << "List is empty!" << endl;
            return;
        }
        CNode* temp = head;
        do {
            cout << temp->data << " ";
            temp = temp->next;
        } while (temp != head);
        cout << head->data << endl; // repeat head at end
    }
};

int main() {
    CircularLinkedList cll;
    int arr[] = {20, 100, 40, 80, 60};
    for (int val : arr)
        cll.insertEnd(val);

    cout << "Circular Linked List (head repeated at end):" << endl;
    cll.displayWithHeadRepeat();

    return 0;
}
//question 3a
#include <iostream>
using namespace std;

class Node {
public:
    int data;
    Node* prev;
    Node* next;
    Node(int val) {
        data = val;
        prev = nullptr;
        next = nullptr;
    }
};

class DoublyLinkedList {
public:
    Node* head;
    DoublyLinkedList() { head = nullptr; }

    void insertAtEnd(int val) {
        Node* newNode = new Node(val);
        if (!head) {
            head = newNode;
            return;
        }
        Node* temp = head;
        while (temp->next != nullptr)
            temp = temp->next;
        temp->next = newNode;
        newNode->prev = temp;
    }

    int size() {
        int count = 0;
        Node* temp = head;
        while (temp != nullptr) {
            count++;
            temp = temp->next;
        }
        return count;
    }
};

int main() {
    DoublyLinkedList dll;
    int arr[] = {10, 20, 30, 40, 50};
    for (int val : arr)
        dll.insertAtEnd(val);

    cout << "Size of Doubly Linked List: " << dll.size() << endl;
    return 0;
}
//b
#include <iostream>
using namespace std;

class CNode {
public:
    int data;
    CNode* next;
    CNode(int val) {
        data = val;
        next = nullptr;
    }
};

class CircularLinkedList {
public:
    CNode* head;
    CircularLinkedList() { head = nullptr; }

    void insertEnd(int val) {
        CNode* newNode = new CNode(val);
        if (!head) {
            head = newNode;
            newNode->next = head;
            return;
        }
        CNode* temp = head;
        while (temp->next != head)
            temp = temp->next;
        temp->next = newNode;
        newNode->next = head;
    }

    int size() {
        if (!head) return 0;
        int count = 1;
        CNode* temp = head->next;
        while (temp != head) {
            count++;
            temp = temp->next;
        }
        return count;
    }
};

int main() {
    CircularLinkedList cll;
    int arr[] = {10, 20, 30, 40, 50};
    for (int val : arr)
        cll.insertEnd(val);

    cout << "Size of Circular Linked List: " << cll.size() << endl;
    return 0;
}
//question 4
#include <iostream>
using namespace std;

class Node {
public:
    char data;
    Node* prev;
    Node* next;
    Node(char val) {
        data = val;
        prev = nullptr;
        next = nullptr;
    }
};

class DoublyLinkedList {
public:
    Node* head;
    DoublyLinkedList() { head = nullptr; }

    void insertAtEnd(char val) {
        Node* newNode = new Node(val);
        if (!head) {
            head = newNode;
            return;
        }
        Node* temp = head;
        while (temp->next != nullptr)
            temp = temp->next;
        temp->next = newNode;
        newNode->prev = temp;
    }

    bool isPalindrome() {
        if (!head) return true;
        Node* left = head;
        Node* right = head;
        while (right->next != nullptr)  // move right to last node
            right = right->next;

        while (left != right && left->prev != right) {
            if (left->data != right->data)
                return false;
            left = left->next;
            right = right->prev;
        }
        return true;
    }
};

int main() {
    DoublyLinkedList dll;
    string str = "radar";
    for (char ch : str)
        dll.insertAtEnd(ch);

    if (dll.isPalindrome())
        cout << "The doubly linked list is a palindrome." << endl;
    else
        cout << "The doubly linked list is not a palindrome." << endl;

    return 0;
}
//question 5
#include <iostream>
using namespace std;

class Node {
public:
    int data;
    Node* next;
    Node(int val) {
        data = val;
        next = nullptr;
    }
};

bool isCircular(Node* head) {
    if (!head) return true; // empty list can be considered circular
    Node* temp = head->next;
    while (temp != nullptr && temp != head) {
        temp = temp->next;
    }
    return (temp == head);
}

int main() {
    // Example 1: Circular Linked List
    Node* head1 = new Node(10);
    Node* n2 = new Node(20);
    Node* n3 = new Node(30);
    head1->next = n2;
    n2->next = n3;
    n3->next = head1;  // makes it circular

    if (isCircular(head1))
        cout << "The linked list is circular." << endl;
    else
        cout << "The linked list is not circular." << endl;

    // Example 2: Non-circular linked list
    Node* head2 = new Node(1);
    head2->next = new Node(2);
    head2->next->next = new Node(3);

    if (isCircular(head2))
        cout << "The linked list is circular." << endl;
    else
        cout << "The linked list is not circular." << endl;

    return 0;
}

