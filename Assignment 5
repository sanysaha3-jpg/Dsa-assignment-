//Question 1
#include <iostream>
using namespace std;
struct Node {
int data;
Node* next;
Node(int v): data(v), next(NULL) {}
};
class SLL {
Node* head;
public:
SLL(): head(NULL) {}
void insertBegin(int v){
Node* n=new Node(v);
n->next=head;
head=n;
}
void insertEnd(int v){
Node* n=new Node(v);
if(!head){head=n;return;}
Node* t=head;
while(t->next) t=t->next;
t->next=n;
}
void insertBefore(int x,int v){
if(!head) return;
if(head->data==x){insertBegin(v);return;}
Node* t=head;
while(t->next && t->next->data!=x) t=t->next;
if(t->next){
Node* n=new Node(v);
n->next=t->next;
t->next=n;

}
}
void insertAfter(int x,int v){
Node* t=head;
while(t && t->data!=x) t=t->next;
if(t){
Node* n=new Node(v);
n->next=t->next;
t->next=n;
}
}
void deleteBegin(){
if(head){Node* t=head;head=head->next;delete t;}
}
void deleteEnd(){
if(!head) return;
if(!head->next){delete head;head=NULL;return;}
Node* t=head;
while(t->next->next) t=t->next;
delete t->next;
t->next=NULL;
}
void deleteValue(int x){
if(!head) return;
if(head->data==x){Node* t=head;head=head->next;delete t;return;}
Node* t=head;
while(t->next && t->next->data!=x) t=t->next;
if(t->next){Node* d=t->next;t->next=d->next;delete d;}
}
int search(int x){
int pos=1;
Node* t=head;
while(t){
if(t->data==x) return pos;
pos++;
t=t->next;
}
return -1;
}
void display(){
Node* t=head;
while(t){
cout<<t->data;
if(t->next) cout<<"->";
t=t->next;
}
cout<<"\n";
}
};
int main(){
SLL s;
int ch,v,x;
while(true){
cout<<"\n1.InsertBegin 2.InsertEnd 3.InsertBefore 4.InsertAfter 5.DeleteBegin 6.DeleteEnd
7.DeleteValue 8.Search 9.Display 10.Exit\n";
cin>>ch;
if(ch==1){cin>>v;s.insertBegin(v);}
else if(ch==2){cin>>v;s.insertEnd(v);}
else if(ch==3){cin>>x>>v;s.insertBefore(x,v);}
else if(ch==4){cin>>x>>v;s.insertAfter(x,v);}
else if(ch==5)s.deleteBegin();
else if(ch==6)s.deleteEnd();
else if(ch==7){cin>>v;s.deleteValue(v);}
else if(ch==8){cin>>v;int p=s.search(v);if(p==-1)cout<<"Not Found\n";else
cout<<"Position:"<<p<<"\n";}
else if(ch==9)s.display();
else if(ch==10)break;
}
}
//Question 2
#include <iostream>
using namespace std;
struct Node{
int data;
Node* next;
Node(int v): data(v), next(NULL){}
};
void append(Node*& head,int v){
Node* n=new Node(v);
if(!head){head=n;return;}
Node* t=head;
while(t->next) t=t->next;
t->next=n;
}
int countDelete(Node*& head,int key){
int c=0;
while(head && head->data==key){Node* d=head;head=head->next;delete d;c++;}
Node* t=head;
while(t && t->next){
if(t->next->data==key){
Node* d=t->next;
t->next=d->next;
delete d;
c++;
} else t=t->next;
}
return c;
}
void display(Node* head){
while(head){
cout<<head->data;
if(head->next) cout<<"->";
head=head->next;
}
cout<<"\n";
}
int main(){
Node* head=NULL;
int n,x,key;
cin>>n;
for(int i=0;i<n;i++){cin>>x;append(head,x);}
cin>>key;
int c=countDelete(head,key);
cout<<"Count:"<<c<<"\n";
display(head);
}
//Question 3
#include <iostream>
using namespace std;
struct Node{
int data;
Node* next;
Node(int v): data(v), next(NULL){}
};
void append(Node*& head,int v){
Node* n=new Node(v);
if(!head){head=n;return;}
Node* t=head;
while(t->next) t=t->next;
t->next=n;
}
int findMiddle(Node* head){
Node* slow=head;
Node* fast=head;
while(fast && fast->next){
slow=slow->next;
fast=fast->next->next;
}
return slow?slow->data:-1;
}
int main(){
Node* head=NULL;
int n,x;
cin>>n;
for(int i=0;i<n;i++){cin>>x;append(head,x);}
cout<<findMiddle(head)<<"\n";
}
//Question 4
#include <iostream>
using namespace std;
struct Node{
int data;
Node* next;
Node(int v): data(v), next(NULL){}
};
void append(Node*& head,int v){
Node* n=new Node(v);
if(!head){head=n;return;}
Node* t=head;
while(t->next) t=t->next;
t->next=n;
}
Node* reverse(Node* head){
Node* prev=NULL;
Node* cur=head;
while(cur){
Node* nxt=cur->next;
cur->next=prev;
prev=cur;
cur=nxt;
}
return prev;
}
void display(Node* head){
while(head){
cout<<head->data;
if(head->next) cout<<"->";
head=head->next;
}
cout<<"\n";
}
int main(){
Node* head=NULL;
int n,x;
cin>>n;
for(int i=0;i<n;i++){cin>>x;append(head,x);}
head=reverse(head);
display(head);
}
