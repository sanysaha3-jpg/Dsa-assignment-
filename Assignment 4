//Question 1
#include <iostream>
using namespace std;
#define SIZE 100
class Queue {
int arr[SIZE], front, rear;
public:
Queue(): front(0), rear(-1) {}
bool isEmpty(){ return front>rear; }
bool isFull(){ return rear==SIZE-1; }
void enqueue(int x){
if(isFull()) cout<<"Full\n";
else arr[++rear]=x;
}
void dequeue(){
if(isEmpty()) cout<<"Empty\n";
else front++;
}
void peek(){
if(isEmpty()) cout<<"Empty\n";
else cout<<arr[front]<<"\n";
}
void display(){
if(isEmpty()){ cout<<"Empty\n"; return;}
for(int i=front;i<=rear;i++) cout<<arr[i]<<" ";
cout<<"\n";
}
};
int main(){
Queue q;
int ch,x;
while(true){
cout<<"\n1.Enqueue 2.Dequeue 3.IsEmpty 4.IsFull 5.Display 6.Peek 7.Exit\n";
cin>>ch;
if(ch==1){cin>>x;q.enqueue(x);}
else if(ch==2)q.dequeue();
else if(ch==3)cout<<(q.isEmpty()?"Yes\n":"No\n");
else if(ch==4)cout<<(q.isFull()?"Yes\n":"No\n");
else if(ch==5)q.display();
else if(ch==6)q.peek();
else if(ch==7)break;
  }
}
//Question 2
#include <iostream>
using namespace std;
#define SIZE 100
class CQueue {
int arr[SIZE], front, rear, count;
public:
CQueue(): front(0), rear(-1), count(0) {}
bool isEmpty(){ return count==0; }
bool isFull(){ return count==SIZE; }
void enqueue(int x){
if(isFull()) cout<<"Full\n";
else{
rear=(rear+1)%SIZE;
arr[rear]=x;
count++;
}
}
void dequeue(){
if(isEmpty()) cout<<"Empty\n";
else{
front=(front+1)%SIZE;
count--;
}
}
void peek(){
if(isEmpty()) cout<<"Empty\n";
else cout<<arr[front]<<"\n";
}
void display(){
if(isEmpty()){ cout<<"Empty\n"; return; }
for(int i=0;i<count;i++) cout<<arr[(front+i)%SIZE]<<" ";
cout<<"\n";
}
};
int main(){
CQueue q;
int ch,x;
  while(true){
cout<<"\n1.Enqueue 2.Dequeue 3.IsEmpty 4.IsFull 5.Display 6.Peek 7.Exit\n";
cin>>ch;
if(ch==1){cin>>x;q.enqueue(x);}
else if(ch==2)q.dequeue();
else if(ch==3)cout<<(q.isEmpty()?"Yes\n":"No\n");
else if(ch==4)cout<<(q.isFull()?"Yes\n":"No\n");
else if(ch==5)q.display();
else if(ch==6)q.peek();
else if(ch==7)break;
}
}
//Question 3
#include <iostream>
#include <queue>
using namespace std;
void interleave(queue<int>& q){
int n=q.size()/2;
queue<int> first;
for(int i=0;i<n;i++){ first.push(q.front()); q.pop(); }
while(!first.empty()){
q.push(first.front()); first.pop();
q.push(q.front()); q.pop();
}
}
int main(){
queue<int> q;
int n,x;
cin>>n;
for(int i=0;i<n;i++){cin>>x;q.push(x);}
interleave(q);
while(!q.empty()){cout<<q.front()<<" ";q.pop();}
}
//Question 4
#include <iostream>
#include <queue>
#include <unordered_map>
using namespace std;
int main(){
string s;
cin>>s;
unordered_map<char,int> freq;
queue<char> q;
for(char c:s){
freq[c]++;
q.push(c);
while(!q.empty() && freq[q.front()]>1) q.pop();
if(q.empty()) cout<<"-1 ";
else cout<<q.front()<<" ";
}
cout<<"\n";
}
//Question 5a
#include <iostream>
#include <queue>
using namespace std;
class StackTwoQ {
queue<int> q1,q2;
public:
void push(int x){ q1.push(x); }
void pop(){
if(q1.empty()) return;
while(q1.size()>1){ q2.push(q1.front()); q1.pop(); }
q1.pop();
swap(q1,q2);
}
int top(){
if(q1.empty()) return -1;
while(q1.size()>1){ q2.push(q1.front()); q1.pop(); }
int t=q1.front();
q2.push(t);
q1.pop();
swap(q1,q2);
return t;
}
bool empty(){ return q1.empty(); }
};
int main(){
StackTwoQ s;
int ch,x;
while(true){
cout<<"\n1.Push 2.Pop 3.Top 4.Empty 5.Exit\n";
cin>>ch;
if(ch==1){cin>>x;s.push(x);}
else if(ch==2)s.pop();
else if(ch==3)cout<<s.top()<<"\n";
else if(ch==4)cout<<(s.empty()?"Yes\n":"No\n");
else if(ch==5)break;
}
}
//Question 5b
#include <iostream>
#include <queue>
using namespace std;
class StackOneQ {
queue<int> q;
public:
void push(int x){
q.push(x);
for(int i=0;i<q.size()-1;i++){
q.push(q.front());
q.pop();
}
}
void pop(){ if(!q.empty()) q.pop(); }
int top(){ return q.empty()?-1:q.front(); }
bool empty(){ return q.empty(); }
};
int main(){
StackOneQ s;
int ch,x;
while(true){
cout<<"\n1.Push 2.Pop 3.Top 4.Empty 5.Exit\n";
cin>>ch;
if(ch==1){cin>>x;s.push(x);}
else if(ch==2)s.pop();
else if(ch==3)cout<<s.top()<<"\n";
else if(ch==4)cout<<(s.empty()?"yes/n":"no/n");
else if(ch==5)break; 
  }
}
