//question 1
#include <iostream>
using namespace std;

// Linear Search
int linearSearch(int arr[], int n, int key) {
    for(int i = 0; i < n; i++) {
        if(arr[i] == key)
            return i;
    }
    return -1;
}

// Binary Search (array must be sorted)
int binarySearch(int arr[], int n, int key) {
    int low = 0, high = n - 1;
    while(low <= high) {
        int mid = low + (high - low)/2;
        if(arr[mid] == key)
            return mid;
        else if(arr[mid] < key)
            low = mid + 1;
        else
            high = mid - 1;
    }
    return -1;
}

int main() {
    int arr[] = {1, 3, 5, 7, 9, 11, 13};
    int n = sizeof(arr)/sizeof(arr[0]);
    int key = 7;
    
    // Linear Search
    int linearIndex = linearSearch(arr, n, key);
    if(linearIndex != -1)
        cout << "Linear Search: Key " << key << " found at index " << linearIndex << endl;
    else
        cout << "Linear Search: Key " << key << " not found" << endl;
    
    // Binary Search
    int binaryIndex = binarySearch(arr, n, key);
    if(binaryIndex != -1)
        cout << "Binary Search: Key " << key << " found at index " << binaryIndex << endl;
    else
        cout << "Binary Search: Key " << key << " not found" << endl;
    
    return 0;
}

//question 2
#include <iostream>
using namespace std;

int main() {
    int arr[] = {64, 34, 25, 12, 22, 11, 90};
    int n = sizeof(arr)/sizeof(arr[0]);

    for(int i=0; i<n-1; i++) {
        for(int j=0; j<n-i-1; j++) {
            if(arr[j] > arr[j+1]) {
                swap(arr[j], arr[j+1]);
            }
        }
    }

    cout << "Sorted array: ";
    for(int i=0; i<n; i++)
        cout << arr[i] << " ";
    cout << endl;

    return 0;
}
//question 3a
#include <iostream>
using namespace std;

int findMissingLinear(int arr[], int n) {
    for(int i=0; i<n; i++) {
        if(arr[i] != i+1)
            return i+1;
    }
    return n+1; // If last number is missing
}

int main() {
    int arr[] = {1,2,3,4,6,7,8};
    int n = sizeof(arr)/sizeof(arr[0]);
    cout << "Missing number (linear) = " << findMissingLinear(arr, n) << endl;
    return 0;
}
//b
#include <iostream>
using namespace std;

int findMissingBinary(int arr[], int n) {
    int low = 0, high = n-1;
    while(low <= high) {
        int mid = low + (high - low)/2;
        if(arr[mid] != mid+1)
            high = mid - 1;
        else
            low = mid + 1;
    }
    return low + 1;
}

int main() {
    int arr[] = {1,2,3,4,6,7,8};
    int n = sizeof(arr)/sizeof(arr[0]);
    cout << "Missing number (binary) = " << findMissingBinary(arr, n) << endl;
    return 0;
}
//question 4
#include <iostream>
#include <algorithm>
using namespace std;

int main() {
    string str1 = "Hello";
    string str2 = "World";

    // (a) Concatenate
    string concat = str1 + str2;
    cout << "Concatenated: " << concat << endl;

    // (b) Reverse
    string rev = str1;
    reverse(rev.begin(), rev.end());
    cout << "Reversed: " << rev << endl;

    // (c) Delete vowels
    string s = "Education";
    s.erase(remove_if(s.begin(), s.end(), [](char c){
        return c=='a'||c=='e'||c=='i'||c=='o'||c=='u'||
               c=='A'||c=='E'||c=='I'||c=='O'||c=='U';
    }), s.end());
    cout << "Without vowels: " << s << endl;

    // (d) Sort string alphabetically
    string s2 = "programming";
    sort(s2.begin(), s2.end());
    cout << "Alphabetically sorted: " << s2 << endl;

    // (e) Uppercase to lowercase
    char ch = 'G';
    ch = tolower(ch);
    cout << "Lowercase: " << ch << endl;

    return 0;
}
//question 6
#include <iostream>
using namespace std;

struct Triplet {
    int row, col, val;
};

int main() {
    
    Triplet matrix[] = {{0,0,1},{0,2,2},{2,1,3}};
    int n = 3; 

    // (a) Transpose
    cout << "Transpose:" << endl;
    for(int i=0;i<n;i++)
        swap(matrix[i].row, matrix[i].col);

    for(int i=0;i<n;i++)
        cout << "("<<matrix[i].row<<","<<matrix[i].col<<")="<<matrix[i].val<<endl;

    return 0;
}
//question 7
#include <iostream>
using namespace std;

int countInversions(int arr[], int n) {
    int count = 0;
    for(int i=0;i<n;i++) {
        for(int j=i+1;j<n;j++) {
            if(arr[i]>arr[j])
                count++;
        }
    }
    return count;
}

int main() {
    int arr[] = {2,4,1,3,5};
    int n = sizeof(arr)/sizeof(arr[0]);
    cout << "Inversions: " << countInversions(arr,n) << endl;
    return 0;
}
//question 8
#include <iostream>
#include <set>
using namespace std;

int main() {
    int arr[] = {1,2,2,3,4,4,5};
    int n = sizeof(arr)/sizeof(arr[0]);

    set<int> distinct(arr, arr+n);
    cout << "Total distinct elements: " << distinct.size() << endl;

    return 0;
}
